#####################
#  Configuration
#####################

# Supposedly waiting too long for commands interferes with vim
set -s escape-time 0

# Use 256 color mode, useful for Vim color schemes
set-option -g default-terminal "screen-256color"
set -ga terminal-overrides ',xterm-256color:Tc'

# Set big clock style to 12-hour
set-option -g clock-mode-style 12

# Increase scroll-back history
set -g history-limit 100500

# Use vim key bindings
setw -g mode-keys vi

# Allow the session name in status left to display up to 50 characters
set-option -g status-left-length 50

# Watch for changes in other windows
setw -g monitor-activity on
set -g visual-activity on

# Number panes and windows starting at 1, renumber as windows are added / removed
set-option -g pane-base-index 1
set-option -g base-index 1
set-option -g renumber-windows on

# Turn off the mouse
set -g mouse off

###########################
# Status Bar
###########################
# enable UTF-8 support in status bar
set -g status-utf8 on

# Pre-load tmuxline configuration that's generated by vim-arlines's
# awareness of the tmuxline plugin. vim-arlines provides the theme.
# This simply applies it before first vim launch, this is generated with vim
# Manually generate in Vim with: :TmuxlineSnapshot! ~/.tmuxline.conf
if-shell "test -f ~/.tmuxline.conf" "source ~/.tmuxline.conf"

#####################
#  Key Bindings
#####################
# Replace C-b with C-s for the prefix key
unbind C-b
set-option -g prefix C-s
bind-key -r C-s send-prefix

# Easy reloading of the tmux.conf configuration file
bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"

# Seamless navigation between vim and tmux (github christoomey/vim-tmux-navigator)
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind-key -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# Set focus events to let Vim know when its out of focus.
set -g focus-events on

# Restore clear screen keybind mapped over by tmux-navigator
bind-key C-l send-keys C-l

# More intuitive pane splitting key-bindings, open all in current path
bind-key - split-window -v  -c '#{pane_current_path}'
bind-key \ split-window -h  -c '#{pane_current_path}'
bind-key c new-window -c '#{pane_current_path}'

# Easy resizing of panes with fine and coarse adjustment
bind-key -n S-Left resize-pane -L 2
bind-key -n S-Right resize-pane -R 2
bind-key -n S-Down resize-pane -D 1
bind-key -n S-Up resize-pane -U 1
bind-key -n C-Left resize-pane -L 10
bind-key -n C-Right resize-pane -R 10
bind-key -n C-Down resize-pane -D 5
bind-key -n C-Up resize-pane -U 5

# Break pane into new window
bind-key b break-pane -d

# Kill current window
bind-key X kill-window

# Easily swap a pane (targeted by pane number) with the current pane
bind-key s display-panes\; command-prompt -p "Swap current pane with pane #: "  "swap-pane -t '%%'"

# Fancy Session Chooser
bind-key S choose-session

# "break session" and "kill session" without exiting tmux
bind-key C-b send-keys 'tat && exit' 'C-m'
bind-key K run-shell 'tmux switch-client -n \; kill-session -t "$(tmux display-message -p "#S")" || tmux kill-session'

# Setup 'v' to begin selection as in Vim
bind-key -t vi-copy v begin-selection
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# Update default binding of `Enter` to also use copy-pipe
unbind -t vi-copy Enter
bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"
