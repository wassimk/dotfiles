# Set personal aliases, overriding those provided by oh-my-zsh libs
# plugins, and themes. For a full list of active aliases, run `alias`.

# file / dir listing
if command -v eza 2>&1 >/dev/null; then
  alias ll='eza -lhg --group-directories-first --git --color=automatic --icons'  # Pretty up the listing
  alias la='eza -lahg --group-directories-first --git --color=automatic --icons' # Include dot files / folders
  alias lh='eza -lahdg --group-directories-first .* --icons'                     # Show only dot files / folders
else
  # fallback to normal ls
  alias ll='ls -lF'
  alias la='ls -laF'
  alias lh='ls -ld .*'
fi

alias ls='ll'
alias l='ll'

# lazygit
if command -v lazygit 2>&1 >/dev/null; then
  alias lg='lazygit'
fi

if command -v bat 2>&1 >/dev/null; then
  alias cat='bat'
fi

# Logs
if command -v grc 2>&1 >/dev/null; then
  alias super_tail="grc tail -f ~/Code/*/log/development.log"
  alias super_tail_giving="grc tail -f ~/Code/{api,church-center,giving,people,accounts}/log/development.log"
fi

# Editor
alias v=$EDITOR
alias e="fd --type f --hidden --exclude .git | fzf-tmux | xargs nvim"
if command -v nvim 2>&1 >/dev/null; then
  alias vim="nvim"
fi

# Source shell and edit zsh, vim and tmux aliases
alias sz='source ~/.zshrc'

# tmux
alias tl='tmux ls -F #S'
alias tka='tmux kill-server'

# bundler / rspec / minitest
alias bi='bundle install'
alias bu='bundle update'
alias be='bundle exec'
alias br='bundle exec rspec'
alias bt='bin/rails test'

# because of alacritty terminfo not being on remote hosts
alias ssh="TERM=xterm-256color ssh"

# copy/paste
case "$OSTYPE" in
  darwin*) alias clip="nc localhost 8377" ;;
  linux*)  alias clip="nc -N localhost 8377" ;;
esac


# generated with `gh copilot alias`
ghcs() {
  FUNCNAME="$funcstack[1]"
  TARGET="shell"
  local GH_DEBUG="$GH_DEBUG"

  read -r -d '' __USAGE <<-EOF
  Wrapper around \`gh copilot suggest\` to suggest a command based on a natural language description of the desired output effort.
  Supports executing suggested commands if applicable.

  USAGE
    $FUNCNAME [flags] <prompt>

  FLAGS
    -d, --debug              Enable debugging
    -h, --help               Display help usage
    -t, --target target      Target for suggestion; must be shell, gh, git
                             default: "$TARGET"

  EXAMPLES

  - Guided experience
    $ $FUNCNAME

  - Git use cases
    $ $FUNCNAME -t git "Undo the most recent local commits"
    $ $FUNCNAME -t git "Clean up local branches"
    $ $FUNCNAME -t git "Setup LFS for images"

  - Working with the GitHub CLI in the terminal
    $ $FUNCNAME -t gh "Create pull request"
    $ $FUNCNAME -t gh "List pull requests waiting for my review"
    $ $FUNCNAME -t gh "Summarize work I have done in issues and pull requests for promotion"

  - General use cases
    $ $FUNCNAME "Kill processes holding onto deleted files"
    $ $FUNCNAME "Test whether there are SSL/TLS issues with github.com"
    $ $FUNCNAME "Convert SVG to PNG and resize"
    $ $FUNCNAME "Convert MOV to animated PNG"
EOF

  local OPT OPTARG OPTIND
  while getopts "dht:-:" OPT; do
          if [ "$OPT" = "-" ]; then     # long option: reformulate OPT and OPTARG
                  OPT="${OPTARG%%=*}"       # extract long option name
                  OPTARG="${OPTARG#"$OPT"}" # extract long option argument (may be empty)
                  OPTARG="${OPTARG#=}"      # if long option argument, remove assigning `=`
          fi

          case "$OPT" in
                  debug | d)
                          GH_DEBUG=api
                          ;;

                  help | h)
                          echo "$__USAGE"
                          return 0
                          ;;

                  target | t)
                          TARGET="$OPTARG"
                          ;;
          esac
  done

  # shift so that $@, $1, etc. refer to the non-option arguments
  shift "$((OPTIND-1))"

  TMPFILE="$(mktemp -t gh-copilotXXXXXX)"
  trap 'rm -f "$TMPFILE"' EXIT
  if GH_DEBUG="$GH_DEBUG" gh copilot suggest -t "$TARGET" "$@" --shell-out "$TMPFILE"; then
          if [ -s "$TMPFILE" ]; then
                  FIXED_CMD="$(cat $TMPFILE)"
                  print -s "$FIXED_CMD"
                  echo
                  eval "$FIXED_CMD"
          fi
  else
          return 1
  fi
}

ghce() {
  FUNCNAME="$funcstack[1]"
  local GH_DEBUG="$GH_DEBUG"

  read -r -d '' __USAGE <<-EOF
  Wrapper around \`gh copilot explain\` to explain a given input command in natural language.

  USAGE
    $FUNCNAME [flags] <command>

  FLAGS
    -d, --debug   Enable debugging
    -h, --help    Display help usage

  EXAMPLES

  # View disk usage, sorted by size
  $ $FUNCNAME 'du -sh | sort -h'

  # View git repository history as text graphical representation
  $ $FUNCNAME 'git log --oneline --graph --decorate --all'

  # Remove binary objects larger than 50 megabytes from git history
  $ $FUNCNAME 'bfg --strip-blobs-bigger-than 50M'
EOF

  local OPT OPTARG OPTIND
  while getopts "dh-:" OPT; do
          if [ "$OPT" = "-" ]; then     # long option: reformulate OPT and OPTARG
                  OPT="${OPTARG%%=*}"       # extract long option name
                  OPTARG="${OPTARG#"$OPT"}" # extract long option argument (may be empty)
                  OPTARG="${OPTARG#=}"      # if long option argument, remove assigning `=`
          fi

          case "$OPT" in
                  debug | d)
                          GH_DEBUG=api
                          ;;

                  help | h)
                          echo "$__USAGE"
                          return 0
                          ;;
          esac
  done

  # shift so that $@, $1, etc. refer to the non-option arguments
  shift "$((OPTIND-1))"

  GH_DEBUG="$GH_DEBUG" gh copilot explain "$@"
}

