#
# Typora
#
typora() {
    if [ "$1" != "" ]
    then
      /usr/bin/open -a typora $1
    else
      /usr/bin/open -a typora "$HOME"/Documents/docs
    fi
}

#
# tmux
#

# completion for "ta" command in "$HOME"/.bin
function _ta() {
  for session in $(tmux list-sessions -F "#S"); do
    compadd "$session"
  done
}
compdef _ta ta

# completion for "tw" alias (ta work)
WORK_DIR="$HOME"/Code
tw() { 
  if ! $(tmux list-sessions | sed -E 's/:.*$//' | grep -q "^$1$"); then
    (TMUX='' tmux new-session -Ad -s "$1" -c $WORK_DIR/"$1")
  fi

  ta "$1"
}

function _tw() {
  for session in $(tmux list-sessions -F "#S"); do
    compadd -J "active" "$session"
  done

  for dir in $(ls -D -1 $WORK_DIR); do
    compadd -J "inactive" "$dir"
  done
}
compdef _tw tw

# completion for "tp" alias (ta cool-project)
PERSONAL_DIR="$HOME"/Personal
tp() {
  if ! $(tmux list-sessions | sed -E 's/:.*$//' | grep -q "^$1$"); then
    (TMUX='' tmux new-session -Ad -s "$1" -c $PERSONAL_DIR/"$1")
  fi

  ta "$1"
}

function _tp() {
  for session in $(tmux list-sessions -F "#S"); do
    compadd -J "active" "$session"
  done

  for dir in $(ls -D -1 $PERSONAL_DIR); do
    compadd -J "inactive" "$dir"
  done
}
compdef _tp tp
# kill session
tk() {
    if [ "$1" != "" ]
    then
        tmux kill-session -t $1
    else
     echo "Kill which session?"
     echo ""
      tmux list-sessions -F "#S"
    fi
}
compdef _ta tk

# Make sure we are always in TMUX, uses "$HOME"/.bin/ta script
_not_inside_tmux() { [[ -z "$TMUX" ]] }

ensure_tmux_is_running() {
  if _not_inside_tmux; then
    if [ -d $DOTFILES ]; then
      cd $DOTFILES
      ta
    else
      ta
    fi
  fi
}

# Make CTRL-Z background and unbackground
function fg-bg() {
  if [[ $#BUFFER -eq 0 ]]; then
    fg
  else
    zle push-input
  fi
}
zle -N fg-bg
bindkey '^Z' fg-bg

#
# git
#
function g {
  if [[ $# > 0 ]]; then
    git $@
  else
    git status
  fi
}

# Complete g like git
compdef g=git

#
# Other Functions
#

# Auto complete for Planning Center Code directory
w() { cd "$HOME"/Work/"$1" && ll }
_w() { _files -J "file" -W "$HOME"/Work -/ }
compdef _w w

# Auto complete for Personal code directory
p() { cd "$HOME"/Personal/"$1" && ll }
_p() { _files -J "file" -W "$HOME"/Personal -/ }
compdef _p p

# Auto complete for Business code directory
b() { cd "$HOME"/Business/"$1" && ll }
_b() { _files -J "file" -W "$HOME"/Business -/ }
compdef _b b

# Auto complete for home directory
h() { cd "$HOME"/"$1" && la }
_h() { _files -J "file" -W "$HOME" -/ }
compdef _h h

# dotfiles
dots() {
  if ! $(tmux list-sessions | sed -E 's/:.*$//' | grep -q "^dotfiles$"); then
    (TMUX='' tmux new-session -Ad -s "dotfiles" -c $DOTFILES)
  fi

  ta dotfiles
}

# Console based weather report
weather() {
    if [ "$1" != "" ]
    then
        curl wttr.in/${1}
    else
        curl wttr.in/74037
    fi
}

# Aggregated man pages
cheat() {
    curl cheat.sh/"$1"
}

#
# Hooks
#
autoload -U add-zsh-hook

function -auto-ls-after-cd() {
  emulate -L zsh
  # Only in response to a user-initiated `cd`, not indirectly (eg. via another
  # function).
  if [ "$ZSH_EVAL_CONTEXT" = "toplevel:shfunc" ]; then
    ll
  fi
}
add-zsh-hook chpwd -auto-ls-after-cd
